#+TITLE: Design Notes

Scratch pad for high level design notes and ideas

* Influences

Emacs - Extensible, uniform software environment.

Erlang - Message based, distributed software runtime w/ userspace
concurrency. "Let It Crash" philosophy.

Hypermedia - Self-describing, uniform interface. Thin general-purpose clients.

Unix - Composability of programs via stdio, pipes, and plaintext. Polyglot.

Plan 9 - Per-process hierarchical namespaces and hypermedia approach to plaintext via plumber

* Client and Runtime
** Goals

Communication between client and runtime is a simple message-based and transport
agnostic interface.

Runtime code should be able to run in several configurations:

- Cross-process, for client and runtime processes on the same machine.
- Over-network, for thin-clients that interact with runtime on different
  machines.
- In-process, for platforms that must run client-runtime in single
  process. (E.g. Mobile)

Client API should be simple and lean so bringing up new clients is low cost.

** Runtime

A typical lifecycle of the client and runtime may look like:

1. Clients opens a bidirectional channel to runtime.
2. Client and runtime trade message over bidirectional channel via client API.
3. When the client exists, it closes the channel, and runtime frees resources
   tied to connection.

The per-client state is maintained in the runtime, so client implemenation is
lean.

The client API will offer request-response style APIs on top of message passing
for convenience, but the channel is a bidirectional.

How the runtime is started may be platform dependent:

- On desktop, runtime daemon runs via typical service management (`systemd`, `launchd`, etc).
- On cloud, runtime may be always running as a service.
- On mobile, a in-process runtime may be spun up during application initialization.

** Runtime - High Level Lifecycle

1. Runtime is initialized in host process
2. Host process begins listening on some transport for new connections
3. Host process hands-off accepted connections to runtime
4. Runtime spawns a dedicated client process per connection
5. Interactions from client connection are processed and forwarded from client
   process to other processes in the runtime.
6. Responses, if any, are forwarded back on client connection.
7. When client task ends or connection is disconnected, the client process is terminated.

** Client API

The client API should be lightweight.

It should support:

- Request / Response
- Pub / Sub - including pushes from runtime
- Hypermedia-Driven Interface

** Client Library

The client API is largely implemented by client library.

Like `libdbus`, the underlying transport should be opaque to client programs -
it may use lower-level IPC mechanisms like unix domain sockets, or TCP, without
affecting API surface between client and client library.

** Hypermedia Client

The client implementation over client API is hypermedia-driven:

TODO: Add notes on hypermedia client

** vrsctl - CLI client

The `vrsctl` CLI is lightweight client to runtime that offers 1-1 mapping to
client API.

Per invocation, it will:
1. Open connection with runtime
2. Send specified message(s)
3. Wait for response(s)
4. Close connection to runtime when stdin closes and all requests were processed.

CLI can be used to bootstrap new clients that is able to launch `vrsctl`
directly, or as a development tool.

* Lyric Lang
** Goals

An embedded lisp dialect provides a single, uniform interface for everything -
code, data, interfaces, and protocol.

Interactions from the REPL or hypermedia interface should be exactly how the
applications are programmed, similar to how the language of the shell can be
used to write scripts.

All data, including interface markup, can be captured by the dialect's
s-expressions.

** Why write your own Lisp?

Paul Graham put it best:

#+begin_quote
A language is by definition reusable. The more of your application you can push
down into a language for writing that type of application, the more of your
software will be reusable.
â€” Paul Graham
#+end_quote

When the language is tailored to the environment, software can be simple and
rich, similar to how shell languages are designed around IO redirection.

It is also my impression that a bulk of software written today fall into
standard, institutionalized patterns - with engineers acting as "human
compilers" to write this code out by hand. Why not let the computer write that
code via higher-level intermediate language?

See also - [Greeenspun's Tenth Rule](https://en.wikipedia.org/wiki/Greenspun's_tenth_rule)

** Lisp as the Uniform Interface

In vrs, it's Lisp all the way down:

- Scripting language is Lisp
- Modules extends runtime via bindings in Lisp
- User interfaces are s-expressions
- Hypermedia controls within interface are s-expressions
- Messages between client and runtime are s-expressions

Lisp is the substrate for code and data that ties the client, runtime, and
modules together.

Lisp is a practical choice for highly interactive, moldable,
application-specific progamming environments.

[Twitter rant](https://twitter.com/leoshimo/status/1694375158897574227)

*** Lisp as Hypermedia

v0.1 sketch of Lisp as Hypermedia

#+begin_src lisp
'((:text_field :id search
               :on_change on_search_text_change
               :value "query input")
  (:ul :id search_results
       (:li :content "Element 1"
            :on_click '(action_for_elem_1))
       (:li :content "Element 2"
            :on_click '(action_for_elem_2))
       (:li :content "Element 3"
            :on_click '(action_for_elem_3))))
#+end_src

* Runtime Program Execution

The runtime spawns and manages processes. These are not OS processes, but
lightweight threads of execution like [Erlang Processes](https://www.erlang.org/docs/22/reference_manual/processes.html).

Each process has its own Lisp environment for evaluating S-expressions.

Unlike Node, which uses callbacks to implement continuations, `lyric` is built
to support preemptive and cooperative multitasking during evaluation, similar to
BEAM VM.

Instead of a subscription + callback mechanism, the process's code describes
when IO is polled, when mailbox is queried, etc.

`lyric` and the runtime provides conveniences for typical patterns,
e.g. implementing long-running services, supervisors, request-response, etc.

* Process, Bytecode, and Fibers

The programs written in `lyric` support yielding - pausing and continuing
execution of bytecode sequences.

This makes it possible for runtime to drive evaluation of program via
asynchronous IO. Interpreter host captures signals yielded during program
execution, dispatches appropriate async IO, and continues execution once the IO
resource is ready.

The key motivation for this is to not tie an OS thread per paused program. A
`lyric` program waiting for IO does not block a thread, since it's runtime state
can be captured as a data structure.

E.g. A 10,000 sleeping processes "at rest" does not use 10,000 threads.

This makes it viable to model most things as programs - e.g. cron jobs are
programs that sleep in a loop:

#+begin_src lyric
(loop (sleep 10000)
      (do_a_thing))
#+end_src

** What is a Fiber

A fiber is a sequence of instructions that can be cooperatively scheduled. When
it runs an instruction to yield for, control flow is returned to caller that
initiated execution of fiber.

A fiber can later be resumed when the event that fiber was paused for occurs,
such as IO, message-passing, etc.

* HyperLyric

HyperLyric is the hypermedia format between the runtime and interactive client shells.

The design is focused on:
- Enabling speedy + simple development of interactive applications
- Supporting many thin, general purpose, client-shell application backed by same
  application code.
- Supporting client-specific, multimodal software experiences without unnecessary
  complexity on client or runtime programs.
- Ease of Automation and Testing

** Uniform Hypermedia-Driven Interface

The hypermedia format should have a minimal, uniform interface.

The interface between client implementations should be simple and minimal, so
building new client shells requires minimal effort.

The interface should provide minimal set of markup, hypermedia controls, and
general-purpose input mechanisms so new software experiences can be built
without clients and runtime programs being updated in lockstep.

The interface should also be focused on being multimodal - i.e. the hypermedia
format should allow both GUI-driven and voice-driven client shells to leverage
the same semantic markup.

Common input mechanisms should be supported, such as Emacs =read= and
=completing-read= APIs, which should prompt user for input in a client-dependent
interface.

As a consequence of leveraging uniform hypermedia, it should be simple to build
tooling and automation on top of this interface - the data and interactions
available on that data should be represented in the markup.

For example, It should be possible to interact with interactive VRS applications
via REPL, using text-based representation of the markup, during development.

The extension of using the REPL to manipulate the "document" is to allow mental
model when *using* the software directly translate to being able to program the
software, in the same way CLI interactions translates to shell scripting, and
using Emacs translates to programming Emacs via buffer primitive. It should be
possible to "log the events" being run during a sequence of interactions, then
use that information to write a program that automates that interaction.

Unlike the Browser Ecosystem, which often uses event handlers from JavaScript to
hook interactive behavior, HyperLyric data will contain the code that defines
the behavior on interaction, similar how there is behavior associated with
anchor tags and form tags.

** Goals

*Declarative*

The interface programming model is *declarative*, borrowing from
functional-reactive programming patterns from Elm, Phoenix LiveView and React.

This should also enable ease of testing and rapid UI iteration in isolation.

*Rich Linking and Object Store*

See also: Object Store

The format should enable explicit links (interactions added to application by
programmer) and implicit links (interactions natural for the data itself).

*Thin Clients*

Instead of having to replicate rich interactive experiences per client shell
implementation (i.e. build thick client applicationz), Hypermedia should allow
thin general-purpose clients, i.e a slim web browser of sorts.

Rich interactivity is enabled by an interactive interface process that runs in
the runtime itself, a la Phoenix LiveView

*Rapid Interactive Dev Loop*

The hypermedia format and tooling should enable interactive development loop for
building and testing UI.

** Conceptual Analogies to Emacs and Web Browsers

HyperLyric is to VRS what buffers are to Emacs, and HTML document / DOM is to
Web Browsers.

It is the representation for data, interface, and behavior.

In a sense, each client is a minimal pseudo-browser for presenting interfaces
for given HyperLyric data.

** Inspirations

- Hypermedia Driven Web Applications
- [[https://github.com/phoenixframework/phoenix_live_view][Phoenix LiveView]]
- Emacs
- [[https://guide.elm-lang.org/architecture/][The Elm Architecture]]
- [[https://htmx.org][HTMX]]

** Lifecycle Overview

When a hypermedia client connects to runtime, a client process representing the
user interface is spawned in the runtime. There is a dedicated bidirectional
channel between the client and runtime's process for that client.

The client process communicates with other processes running in the runtime, and
sends user interface hypermedia over the channel. The hypermedia contains
self-describing data and hypermedia controls.

Client renders the hypermedia format in client-dependent format, e.g:
- A TUI client shell renders markup as plaintext.
- A GUI client shell renders markup in Native UI or Browser-based Renderer.
- A voice client shell "renders" markup as STT audio.

When the user interacts with the interface, registered events are sent from the
hypermedia client to the client interface process, which updates internal state,
and pushes updated hypermedia data back to client if needed.

The updated markup is received by hypermedia client, which itself updates what
is shown to the user.

The connection is bidirectional:
- Client can dispatch commands, which sends messages to interactive process
- Runtime can notify clients via Pub / Sub topics the client registered itself for

** Features

Element Selector
- API to specify elements on page, similar to CSS selectors
- Used to specify targets for different interactions, e.g. toggling visibility of =#element=

Navigation
- TODO: What Navigation Primitives make sense? URLs? Stacks of "Views"?

General Purpose Inputs
- High-level primitives like Emacs =read= and =completing-read= allow triggering
  standardized input behavior in a way that is appropriate for hypermedia client
  implementation

* Object Store

*What is it?*
General Purpose, Object Store that's focused on linking data and functionality
on that data.

At its heart, it hopes to allow rich interop and workflows across different
pieces of software in the runtime.

If a "program" in VRS is:
- Data represented in Object Store
- Functions that have side effects on data in object store
- Functions that generate hypermedia interface on data in object store

It should be possible that data, functionality and interfaces between different
pieces of software can compose more naturally.

Principle: Programs (including data, capabilities, and interface) should be
composable in ways that the wasn't thought about when original program was
written.

The format allows explicit links (interactions added to application by
programmer) and implicit links (interactions natural for the data itself).

** Inspirations

- [[https://github.com/oantolin/embark][Emacs Embark]]
- [[https://mail.gnu.org/archive/html/hyperbole-users/2019-01/msg00037.html][GNU Hyperbole]]
- ECS Patterns in Game Dev

#+begin_quote
Rather than manually specifying relationships between bits of information, we
need a system that can see these connections simply by taking context and
content into account... Hyperbole itself, however, should be thought of as an
extensible "information enabler", automatically turning inert documents into
active ones, through the process of recognizing implicit buttons and giving you
multiple ways to interact with those buttons. It's just like what Wiki did for
text, but now for lots of other things, and in many more ways.
- John Wiegley
#+end_quote

#+begin_quote
humans must too often carry their data from program to program... Why should
humans do the work? Usually there is one obvious thing to do with a piece of
data, and the data itself suggests what this is.
- Rob Pike

http://doc.cat-v.org/plan_9/4th_edition/papers/plumb
#+end_quote

** Features

Target-Action Links
- API to associate a collection of actions with specific types of data -
  i.e. data shaped a certain way can be passed to some function.
- Like Embark - allow chaining actions based on the shape of data interactively

- [ ] Read / store data
- [ ] Allow links between pieces of data for a specific "entity" -  data graph.
- [ ] Invoke functionality from linked entity data directly, like Emacs Embark
- [ ] Proactively suggests links and functionality
** Ideas

An interactive application is: Functions that modify state, Functions that
create markup from state.

Like Embark - Support workflows like =embark-act= and =embark-collect= across a
collection of VRS applications

Entity system that automatically enabled dynamic interface generation and interaction?

Features like Emacs =(interactive)= that allows an interface to be created from
the function implementing that capability directly.

Reusable Interface Components
- Rendering should allow composition and reuse - a view of data can be used
  across "applications" or interactive shells without being tied down to
  specific application

Allow easy "linking" experience - i.e. in one software experience, I can select
an entity, search for related entity, and link them all within same workflow.
